{
    "numero_nf": {
        "page": 0,
        "coords": [1277, 142, 1441, 172]
    },
    "data_emissao": {
        "page": 0,
        "coords": [1221, 204, 1370, 231]
    },
    "cnpj_prestador": {
        "page": 0,
        "coords": [298, 336, 499, 362]
    },
    "nome_prestador": {
        "page": 0,
        "coords": [376, 367, 1473, 398]
    },
    "cnpj_tomador": {
        "page": 0,
        "coords": [289, 551, 530, 576]
    },
    "nome_tomador": {
        "page": 0,
        "coords": [371, 524, 987, 551]
    },
    "valor_servico": {
        "page": 0,
        "coords": [1005, 1354, 1101, 1387]
    },
    "discriminacao": {
        "page": 0,
        "coords": [159, 749, 1484, 1333]
    }
}```
*Observação: JSON não usa tuplas `()`, então convertemos as coordenadas para listas `[]`.*

---

### Passo 2: Refatorar `config.py` para Carregar Layouts

Agora, vamos remover o `FIELD_MAP` fixo do `config.py` e, em seu lugar, criar uma função que carrega um layout a partir de um arquivo JSON.

**Caminho do arquivo:** `nfse_extractor/src/config.py`

```python
"""
Módulo de Configuração

Centraliza todas as configurações do projeto, como mapeamento de campos,
coordenadas de extração e caminhos de diretórios.
"""
import json
from pathlib import Path
from typing import Dict, Any

# --- Caminhos do Projeto ---
BASE_DIR = Path(__file__).resolve().parent.parent
OUTPUT_DIR = BASE_DIR / "output"
PDF_SAMPLES_DIR = BASE_DIR / "pdf_samples"
LAYOUTS_DIR = BASE_DIR / "layouts"  # <-- NOVO CAMINHO

# Garante que os diretórios existam
OUTPUT_DIR.mkdir(exist_ok=True)
PDF_SAMPLES_DIR.mkdir(exist_ok=True)
LAYOUTS_DIR.mkdir(exist_ok=True)

# --- REMOVEMOS O FIELD_MAP DAQUI ---

def load_layout(layout_name: str) -> Dict[str, Any]:
    """
    Carrega um mapa de campos (layout) de um arquivo JSON.

    Args:
        layout_name (str): O nome do arquivo de layout (sem a extensão .json).

    Returns:
        Dict[str, Any]: O dicionário contendo o mapa de campos.
                        Lança uma exceção se o arquivo não for encontrado.
    """
    layout_path = LAYOUTS_DIR / f"{layout_name}.json"
    try:
        with open(layout_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"ERRO: Arquivo de layout '{layout_path}' não encontrado.")
        raise
    except json.JSONDecodeError:
        print(f"ERRO: O arquivo de layout '{layout_path}' não é um JSON válido.")
        raise